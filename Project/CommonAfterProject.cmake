
#message(STATUS "AAAAAAAAAAAAAAAAA  ${CMAKE_CXX_COMPILER}")

# CMAKE_CXX_COMPILER 略特殊, 默认无设置时, 需要在 project 命令后执行才具有检测到的默认路径 Compiler 
if(MSVC)
    add_compile_options(/MP)
	message(STATUS "Compiler Is Using MSVC")
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
elseif(CMAKE_CXX_COMPILER MATCHES "c\\+\\+$")
	set(GCC ON)
	message(STATUS "Compiler Is Using GCC")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-format-zero-length")
elseif(CMAKE_CXX_COMPILER MATCHES "clang\\+\\+$")
	set(CLANG ON)
	message(STATUS "Compiler Is Using Clang")
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-format-zero-length")
endif()

set(ProjectBinDirPath ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME})

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ProjectBinDirPath})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${ProjectBinDirPath})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${ProjectBinDirPath})

if(MSVC)
	set(ProjectBinDirPathDebug ${CMAKE_BINARY_DIR}/Debug/bin)
	set(ProjectBinDirPathRelease ${CMAKE_BINARY_DIR}/Release/bin)
	set(ProjectLibDirPathDebug ${CMAKE_BINARY_DIR}/Debug/lib)
	set(ProjectLibDirPathRelease ${CMAKE_BINARY_DIR}/Release/lib)
else()
	set(ProjectBinDirPathDebug ${CMAKE_BINARY_DIR}/../Debug/bin)
	set(ProjectBinDirPathRelease ${CMAKE_BINARY_DIR}/../Release/bin)
	set(ProjectLibDirPathDebug ${CMAKE_BINARY_DIR}/../Debug/lib)
	set(ProjectLibDirPathRelease ${CMAKE_BINARY_DIR}/../Release/lib)
endif()
	
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${ProjectBinDirPathDebug})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${ProjectBinDirPathRelease})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${ProjectLibDirPathDebug})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${ProjectLibDirPathRelease})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${ProjectLibDirPathDebug})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${ProjectLibDirPathRelease})

if(WIN32)
	set(ProjectPlatform Windows)
	message(STATUS "Target Is on WIN32")
elseif(UNIX)
	set(ProjectPlatform Linux)
	message(STATUS "Target Is on UNIX")
elseif(APPLE)
	set(ProjectPlatform Apple)
	message(STATUS "Target Is on APPLE")
endif()

set(ProjectArch x86)
if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
	set(ProjectArch x64)
endif()

set(RelativeInstallTargetDirPath "$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>")
set(InstalledPlatformArchDirPath build/${ProjectPlatform}/${ProjectArch}/${RelativeInstallTargetDirPath})

install(FILES "${RootDirPath}/LICENSE.md" DESTINATION ${ProjectName})

option(SETUP "Setup dependencies" OFF)
option(DEPLOY "Deploy the installed" OFF)

set(StorageDirPath "http://WishingContributor:1@localhost/sainimu78_Storage/")
set(ListSrcToDownload "")
set(ListDstDownloadTo "")