set(ProjectDirPath ${RootProjectDirPath}/${ProjectName})

#message(STATUS "AAAAAAAAAAAAAAAAA  ${CMAKE_CXX_COMPILER}")

# CMAKE_CXX_COMPILER 略特殊, 默认无设置时, 需要在 project 命令后执行才具有检测到的默认路径 Compiler 
if(MSVC)
    add_compile_options(/MP)
	message(STATUS "Compiler Is Using MSVC")
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
elseif(CMAKE_CXX_COMPILER MATCHES "c\\+\\+$")
	set(GCC ON)
	message(STATUS "Compiler Is Using GCC")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-format-zero-length")
elseif(CMAKE_CXX_COMPILER MATCHES "clang\\+\\+$")
	set(CLANG ON)
	message(STATUS "Compiler Is Using Clang")
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-format-zero-length")
endif()

set(BinDirName bin)
set(LibDirName lib)
set(ProjectBinDirPath ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME})

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ProjectBinDirPath})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${ProjectBinDirPath})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${ProjectBinDirPath})

if(MSVC)
	set(ProjectBinDirPathDebug ${CMAKE_BINARY_DIR}/Debug/${BinDirName})
	set(ProjectBinDirPathRelease ${CMAKE_BINARY_DIR}/Release/${BinDirName})
	set(ProjectLibDirPathDebug ${CMAKE_BINARY_DIR}/Debug/${LibDirName})
	set(ProjectLibDirPathRelease ${CMAKE_BINARY_DIR}/Release/${LibDirName})
else()
	set(ProjectBinDirPathDebug ${CMAKE_BINARY_DIR}/../Debug/${BinDirName})
	set(ProjectBinDirPathRelease ${CMAKE_BINARY_DIR}/../Release/${BinDirName})
	set(ProjectLibDirPathDebug ${CMAKE_BINARY_DIR}/../Debug/${BinDirName})
	set(ProjectLibDirPathRelease ${CMAKE_BINARY_DIR}/../Release/${BinDirName})
endif()
	
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${ProjectBinDirPathDebug})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${ProjectBinDirPathRelease})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${ProjectLibDirPathDebug})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${ProjectLibDirPathRelease})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${ProjectLibDirPathDebug})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${ProjectLibDirPathRelease})

set(ProjectPlatform )
set(ProjectSharedLibPrefix )
set(ProjectSharedLibPostfix )
set(ProjectStaticLibPrefix )
set(ProjectStaticLibPostfix )
if(WIN32)
	set(ProjectPlatform Windows)
	set(ProjectSharedLibPostfix .dll)
	set(ProjectStaticLibPostfix .lib)
	message(STATUS "Target Is on WIN32")
elseif(UNIX)
	set(ProjectPlatform Linux)
	set(ProjectSharedLibPrefix lib)
	set(ProjectStaticLibPrefix lib)
	set(ProjectSharedLibPostfix .so)
	set(ProjectStaticLibPostfix .a)
	message(STATUS "Target Is on UNIX")
elseif(APPLE)
	set(ProjectPlatform Apple)
	message(STATUS "Target Is on APPLE")
endif()

if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
	set(x64 ON)
	set(ProjectArch x64)
else()
	set(x86 ON)
	set(ProjectArch x86)
endif()

set(RelativeInstallTargetDirPathDebug Debug)
set(RelativeInstallTargetDirPathRelease Release)
set(InstalledPlatformArchDirPathDebug build/${ProjectPlatform}/${ProjectArch}/${RelativeInstallTargetDirPathDebug})
set(InstalledPlatformArchDirPathRelease build/${ProjectPlatform}/${ProjectArch}/${RelativeInstallTargetDirPathRelease})
set(ProjectInstallingDirPath ${ProjectName})
set(ProjectInstallingTargetDirPathDebug ${ProjectInstallingDirPath}/${InstalledPlatformArchDirPathDebug})
set(ProjectInstallingTargetDirPathRelease ${ProjectInstallingDirPath}/${InstalledPlatformArchDirPathRelease})
set(ProjectInstallingTargetDirPath "$<$<CONFIG:Debug>:${ProjectInstallingDirPath}/build/${ProjectPlatform}/${ProjectArch}/${RelativeInstallTargetDirPathDebug}>$<$<CONFIG:Release>:${ProjectInstallingDirPath}/build/${ProjectPlatform}/${ProjectArch}/${RelativeInstallTargetDirPathRelease}>")

install(FILES "${RootDirPath}/LICENSE.md" DESTINATION ${ProjectName})

option(PROJECT_SETUP "Setup the project dependencies" OFF)
option(PROJECT_RELEASE "Release the installed project" OFF)

set(RootTempDirPath ${RootDirPath}/Build/${ProjectName}/${ProjectPlatform}/TempForSetupOrRelease)
set(ProjectTempDirPath ${RootTempDirPath}/${ProjectName})
	
set(StorageAddrPath http://WishingContributor:1@192.168.245.158/sainimu78_Storage)
if(WIN32)
	set(StorageDirPath F:/sainimu78_Storage)
else()
	set(StorageDirPath /mnt/SharedFolder_Ubuntu)
endif()
set(PlatformReleaseDirPath ${StorageDirPath}/Release/${ProjectPlatform})
set(ProjectInstalledDirPath ${CMAKE_INSTALL_PREFIX}/${ProjectName})
set(IsSetupOrReleaseMode OFF)
if(PROJECT_SETUP OR PROJECT_RELEASE)
	set(IsSetupOrReleaseMode ON)
endif()
#if(IsSetupOrReleaseMode OR NOT EXISTS "${CMAKE_CACHEFILE_DIR}")
#	include(${RootCMakeDirPath}/GetZip.cmake)
#endif()
if(NOT IsSetupOrReleaseMode AND EXISTS "${ProjectInstalledDirPath}")
    message(STATUS "Clearing install directory: ${ProjectInstalledDirPath}")
    file(REMOVE_RECURSE "${ProjectInstalledDirPath}")
endif()